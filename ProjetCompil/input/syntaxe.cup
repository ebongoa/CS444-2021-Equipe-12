// ---------------------------------------------------------------------------
// syntaxe.cup
// Fichier cup qui définit l'analyseur syntaxique
// ---------------------------------------------------------------------------

package fr.esisar.compilation.syntaxe;

import java_cup.runtime.*;
import fr.esisar.compilation.global.src.*;
import java.io.InputStream;

/* Code pour l'analyseur syntaxique. */
parser code {:

   /**
    * Réalise l'analyse syntaxique du fichier passé en argument (ou de 
    * l'entrée standard si args est un tableau vide) et retourne 
    * l'abstrait correspondant.
    * Lève l'exception ErreurLexicale en cas d'erreur lexicale, et 
    * ErreurSyntaxe en cas d'erreur de syntaxe.
    */
   public static Arbre analyseSyntaxique(String[] args) 
         throws Exception, ErreurLexicale, ErreurSyntaxe {

      // On récupère le fichier à analyser
      InputStream fichierCas = ArgsFichier.ouvrir(args);

      // Création de l'analyseur lexical
      Lexical analyseurLex = new Lexical(fichierCas);

      // Création de l'analyseur syntaxique
      parser analyseurSynt = new parser(analyseurLex);

      // Appel de l'analyseur syntaxique et récupération de l'arbre résultat
      Object result = analyseurSynt.parse().value;
      Arbre arbre = (Arbre) result;
      
      // On retourne l'arbre abstrait construit
      return arbre;
   }

   /**
    * Affiche un message d'erreur en cas d'erreur de syntaxe.
    */
   public void syntax_error(Symbol cur_token) {
      // Affichage du message d'erreur, avec le numéro de ligne 
      System.out.println("Erreur de syntaxe ... ligne " + numLigne()) ;
   }

   /**
    * Méthode appelée en cas d'erreur de syntaxe.
    */
   public void unrecovered_syntax_error(Symbol cur_token)
         throws ErreurSyntaxe {
      throw new ErreurSyntaxe();
   }

   /**
    * Retourne le numéro de ligne courant.
    */
   public int numLigne() {
      // On récupère l'analyseur lexical
      Lexical anaLex = (Lexical) getScanner();
      return anaLex.numLigne();
   }
:};

/* Terminaux (tokens retournés par l'analyseur lexical. */
terminal String IDF;          // Identificateur
terminal Integer CONST_ENT;   // Constante entière
terminal Float CONST_REEL;    // Constante réelle
terminal String CONST_CHAINE; // Constante chaîne

/* Mots réservés */
terminal   AND,         ARRAY,       BEGIN;
terminal   DIV,         DO,          DOWNTO;
terminal   ELSE,        END,         FOR;
terminal   IF,          MOD,         NEW_LINE;
terminal   NOT,         NULL,        OF;
terminal   OR,          PROGRAM,     READ;
terminal   THEN,        TO,          WHILE;
terminal   WRITE;

/* Opérateurs */
terminal INF, SUP, EGAL, DIFF, // "<", ">", "=", "/="
         INF_EGAL, SUP_EGAL,   // "<=", ">="
         PLUS, MOINS,          // "+", "-"
         MULT, DIV_REEL;       // "*", "/"

/* Autres terminaux */
terminal PAR_OUVR, PAR_FERM; // "(", ")" 
terminal DOUBLE_POINT;       // ".."
terminal DEUX_POINTS;        // ":"
terminal VIRGULE;            // ","
terminal POINT_VIRGULE;      // ";"
terminal CROCH_OUVR;         // "["
terminal CROCH_FERM;         // "]"
terminal AFFECT;             // ":="
terminal POINT;              // "."

/* Définition des non terminaux de la grammaire */
non terminal Arbre program;
non terminal Arbre liste_decl;
non terminal Arbre liste_inst;
non terminal Arbre inst;
non terminal Arbre decl;
non terminal Arbre liste_idf;
non terminal Arbre type;
non terminal Arbre idf;
non terminal Arbre type_intervalle;
non terminal Arbre constante;
non terminal Arbre const;
non terminal Arbre pas;
non terminal Arbre liste_exp;
non terminal Arbre exp;
non terminal Arbre facteur;
non terminal Arbre place;

/*
   On définit les priorités des opérateurs
   Les priorités vont dans l'ordre croissant
   On déclare egalement l'associativité des opérateurs
   (left, right, ou nonassoc)
*/

precedence nonassoc INF, SUP, EGAL, DIFF, INF_EGAL, SUP_EGAL;
precedence left PLUS, MOINS, OR;
precedence left MULT, DIV_REEL, DIV, MOD, AND;
precedence nonassoc NOT;

program ::= PROGRAM:p liste_decl:a1 BEGIN liste_inst:a2 END POINT
   {:
      RESULT = Arbre.creation2(Noeud.Programme, a1, a2, pleft);
      // pleft : Numéro de ligne du mot réservé "program".
   :}
   ;
liste_decl ::= liste_decl:a1 decl:a2 POINT_VIRGULE
   {:
      RESULT = Arbre.creation2(Noeud.ListeDecl, a1, a2, a2.getNumLigne());
   :}
   |  // epsilon
   {:
      RESULT = Arbre.creation0(Noeud.Vide, parser.numLigne());
   :}
   ;

// ---------------------------------------------
// ECRIRE LES ACTIONS POUR LES REGLES SUIVANTES
// ---------------------------------------------



decl ::= liste_idf:lid1 DEUX_POINTS type:t1
   {:
       RESULT = Arbre.creation2(Noeud.Decl,lid1,t1,t1.getNumLigne());
   :}
   ;
liste_idf ::= liste_idf:lid1 VIRGULE idf:id1
   {: 
      RESULT = Arbre.creation2(Noeud.ListeIdent,lid1,id1,id1.getNumLigne());
   :}
   |  idf
   {:
      RESULT = Arbre.creation0(Noeud.Vide,parser.numLigne());
   :}
   ;

type ::= idf:id1
   {:
      RESULT = Arbre.creation1(Noeud.Ident,id1,id1.getNumLigne());
   :}
   |  type_intervalle:ti1
   {:
      RESULT = Arbre.creation1(Noeud.Intervalle,ti1,ti1.getNumLigne());
   :}
   |  ARRAY CROCH_OUVR type_intervalle:ti1 CROCH_FERM OF type:t1
   {:
      RESULT = Arbre.creation2(Noeud.Tableau,ti1,t1,t1.getNumLigne());
   :}
   ;

type_intervalle ::= constante:c1 DOUBLE_POINT constante:c2
   {:
      RESULT = Arbre.creation2(Noeud.Intervalle,c1,c2,c2.getNumLigne());
   :}
   ;

constante ::= PLUS const:c1
   {:
      RESULT = Arbre.creation1(Noeud.PlusUnaire,c1,c1.getNumLigne());
   :}
   |  MOINS const:c1
   {: 
      RESULT = Arbre.creation1(Noeud.MoinsUnaire,c1,c1.getNumLigne());     
   :}
   |  const:c1
   {:
      RESULT = c1;
   :}
   ;

const ::= CONST_ENT
   {:
      RESULT = Arbre.creation0(Noeud.Entier,parser.numLigne());
   :}
   |  idf:id1
   {:
      RESULT = Arbre.creation1(Noeud.Ident,id1,id1.getNumLigne());
   :}
   ;
idf ::= IDF
   {:
  RESULT = Arbre.creation0(Noeud.Ident,parser.numLigne()); 
   :}
   ;

liste_inst ::= liste_inst:li1 inst:i1 POINT_VIRGULE
   {: 
       RESULT = Arbre.creation2(Noeud.ListeInst,li1,i1,i1.getNumLigne());
   :}
   |  inst:i1 POINT_VIRGULE
   {:
      RESULT = Arbre.creation2(Noeud.ListeInst, Arbre.creation0(Noeud.Vide, parser.numLigne()), i1, i1.getNumLigne());  
   :}
   ;

inst ::= NULL
   {:
      RESULT = Arbre.creation0(Noeud.Nop,parser.numLigne());
   :}
   |  place:p1 AFFECT exp:e1
   {:
      RESULT = Arbre.creation2(Noeud.Affect,p1,e1,e1.getNumLigne()); 
   :}
   |  FOR pas:p1 DO liste_inst:li1 END
   {:
      RESULT = Arbre.creation2(Noeud.Pour,p1,li1,li1.getNumLigne());      
   :}
   |  WHILE exp:e1 DO liste_inst:li1 END
   {:
      RESULT = Arbre.creation2(Noeud.TantQue,e1,li1,li1.getNumLigne()); 
   :}
   |  IF exp:e1 THEN liste_inst:li1 END
   {:
      RESULT = Arbre.creation2(Noeud.Si,e1,li1,li1.getNumLigne());  
   :}
   |  IF exp:e1 THEN liste_inst:li1 ELSE liste_inst:li2 END
   {:
      RESULT = Arbre.creation3(Noeud.Si,e1,li1,li2,li2.getNumLigne());
   :}
   |  WRITE PAR_OUVR liste_exp:le1 PAR_FERM
   {:
     RESULT = Arbre.creation1(Noeud.Ecriture,le1,le1.getNumLigne());   
   :}
   |  READ PAR_OUVR place:p1 PAR_FERM
   {:
     RESULT = Arbre.creation1(Noeud.Lecture,p1,p1.getNumLigne());  
   :}
   |  NEW_LINE
   {:
      RESULT = Arbre.creation0(Noeud.Ligne,parser.numLigne()); 
   :}
   ;

pas ::= idf:id1 AFFECT exp:e1 TO exp:e2
   {:
      RESULT = Arbre.creation3(Noeud.Increment,id1,e1,e2,e2.getNumLigne());
   :}
   |  idf:id1 AFFECT exp:e1 DOWNTO exp:e2
   {: 
      RESULT = Arbre.creation3(Noeud.Decrement,id1,e1,e2,e2.getNumLigne());
   :}
   ;

liste_exp ::= liste_exp:le1 VIRGULE exp:e1
   {:
      RESULT = Arbre.creation2(Noeud.ListeExp,le1,e1,e1.getNumLigne());
   :}
   |
   {:
      RESULT = Arbre.creation0(Noeud.Vide,parser.numLigne());
   :}
   ;
   
exp ::= facteur:f1
   {:
      RESULT = f1;
   :}
   |  exp:e1 AND exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.Et,e1,e2,e2.getNumLigne());
   :}
   |  exp:e1 OR exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.Ou,e1,e2,e2.getNumLigne()); 
   :}
   |  exp:e1 EGAL exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.Egal,e1,e2,e2.getNumLigne());
   :}
   |  exp:e1 INF_EGAL exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.InfEgal,e1,e2,e2.getNumLigne()); 
   :}
   |  exp:e1 SUP_EGAL exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.SupEgal,e1,e2,e2.getNumLigne()); 
   :}
   |  exp:e1 DIFF exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.NonEgal,e1,e2,e2.getNumLigne()); 
   :}
   |  exp:e1 INF exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.Inf,e1,e2,e2.getNumLigne());
   :}
   |  exp:e1 SUP exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.Sup,e1,e2,e2.getNumLigne()); 
   :}
   |  exp:e1 PLUS exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.Plus,e1,e2,e2.getNumLigne()); 
   :}
   |  exp:e1 MOINS exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.Moins,e1,e2,e2.getNumLigne()); 
   :}
   |  exp:e1 MULT exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.Mult,e1,e2,e2.getNumLigne()); 
   :}
   |  exp:e1 DIV_REEL exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.DivReel,e1,e2,e2.getNumLigne()); 
   :}
   |  exp:e1 MOD exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.Reste,e1,e2,e2.getNumLigne()); 
   :}
   |  exp:e1 DIV exp:e2
   {:
      RESULT = Arbre.creation2(Noeud.Quotient,e1,e2,e2.getNumLigne()); 
   :}
   |  PLUS facteur:f1
   {: 
      RESULT = Arbre.creation1(Noeud.PlusUnaire,f1,f1.getNumLigne()); 
   :}
   |  MOINS facteur:f1
   {: 
      RESULT = Arbre.creation1(Noeud.MoinsUnaire,f1,f1.getNumLigne());  
   :}
   |  NOT facteur:f1
   {: 
      RESULT = Arbre.creation1(Noeud.Non,f1,f1.getNumLigne()); 
   :}
   ;


facteur ::= CONST_ENT
   {:
      RESULT = Arbre.creation0(Noeud.Entier,parser.numLigne());
   :}
   |  CONST_REEL
   {: 
      RESULT = Arbre.creation0(Noeud.Reel,parser.numLigne());      
   :}
   |  CONST_CHAINE
   {:   
      RESULT = Arbre.creation0(Noeud.Chaine,parser.numLigne());
   :}
   |  place:p1
   {:
      RESULT =p1;
   :}
   |  PAR_OUVR exp:e1 PAR_FERM
   {:
      RESULT = Arbre.creation1(Noeud.Chaine,e1,e1.getNumLigne());
   :}
   ;
//?
place ::= idf
   {:
      RESULT = Arbre.creation0(Noeud.Ident,parser.numLigne()); 
   :}
   |  place:p1 CROCH_OUVR exp:e1 CROCH_FERM
   {:
      RESULT = Arbre.creation2(Noeud.Index,p1,e1,e1.getNumLigne());
   :}
   ;